name: SAM Validate, Build, Test, Deploy
on:
  push:
    branches: [ master ]

jobs:
  sam-validate-build-test-deploy:
    runs-on: ubuntu-latest
    outputs:
      env-name: ${{ steps.env-name.outputs.environment }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '12'
      - name: Install Dependencies with Apt Get
        run: |
          sudo apt-get update
          sudo apt-get install python3.8 jq -y
      - name: Install Pip Dependencies for CI
        run: |
          pip3 install pytest
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Configure variables
        shell: bash
        id: vars
        env:
          REPO: ${{ github.repository }}
          HASH: ${{ github.sha }}
          REF: ${{ github.ref }}
        run: |
          # Set variables
          BRANCH=${REF#refs/heads/}
          SAFE_BRANCH_NAME="$(echo ${BRANCH#feature/} | awk '{ print tolower($1) }')"
          # In this step we are setting variables and persistenting them
          # into the environment so that they can be utilized in other steps
          echo "::set-output name=branch::$SAFE_BRANCH_NAME"
          # Output variables to ensure their values are set correctly when ran
          echo "The region is ${{ secrets.AWS_REGION }}"
          echo "The branch is $SAFE_BRANCH_NAME"
      - name: SAM Build
        run: |
          yarn
          NODE_ENV=production yarn build
      - name: SAM Deploy
        run: |
          sam deploy \
            --s3-bucket zj-cloudformation-templates \
            --region ${{ secrets.AWS_REGION }} \
            --stack-name "${{ steps.vars.outputs.branch }}-tenants" \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
                ApiGatewayStageName="staging" \
                IsProduction="true"
          API_ID=$(aws cloudformation describe-stacks --stack-name ${{ steps.vars.outputs.branch }}-tenants --query 'Stacks[].Outputs[?OutputKey==`ApiId`].[OutputValue]' --output text --region ${{ secrets.AWS_REGION }})
          aws apigatewayv2 create-deployment --api-id $API_ID --stage-name staging --description "Github actions ${{ github.run_id }}" --region ${{ secrets.AWS_REGION }}
